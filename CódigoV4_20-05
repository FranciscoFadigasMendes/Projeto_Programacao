#include <stdio.h>
#include <stdlib.h>

#define N_PC 25
/*PROBLEMAS:
--DO WHILE PARA DEPOIS DE DUAS VEZES,
--STRINGS NO ADD:COMPUTADOR N FUNCIONAM,
-- estado substitui ano

*/



void menu_inicial();
int opc_menu(int opc);
void add_computador();
void solicitar_intervencao();
void registar_intervencao();
void lista();
void info();
void gravar();
void sair();

int contador=0;   // inicializa o contador a 0


struct geral{               //Estrutura que contem todas as variáveis
    int add_numero_id;
    char designacao[50];
    char nome_colab[50];
    int data_atribuicao[2];
    int estado_computador;
    float valor_equipamento;
    char codigo_int[50];
    int numero_id;
    int data_pedido[2];
    char descricao[200];
};

//------------------------------------------------------
//------------------------------------------------------

int main()
{
    int opc;

    do{
        menu_inicial();
        fflush(stdin);
        scanf("%d",&opc);
        opc_menu(opc);
        printf("\n\n---------------------------------------------------------------");
    }
    while(opc=!0);


return 0;
}
//------------------------------------------------------
//---------------Funcões Secundárias--------------------

void menu_inicial()                 //Função que imprime o display do menu principal
{

printf("\n\n\n\n\t\t\tGestao de Computadores Portateis\n\n");
printf("Total de Computadores: %d\t\t\t",contador);
printf("Valor dos Computadores(euros):(memoria a definir)\n");
printf("Intervencoes Solicitadas:\t\t\t\t\t");
printf("Intervencoes Efetuadas:(memoria a definir)\n\n");

printf("1. Novo Computador\n");
printf("2. Solicitar Intervencao\n");
printf("3. Registar Intervencao\n");
printf("4. Listar\n");
printf("5. Informacoes\n");
printf("6. Gravar\n");
printf("Selecione a Opcao:");
}

//-------------------------------------------------------

int opc_menu(int opc)  //Função que vai ler a opcção do utilizador e redirecioná-lo para o sub-menu correto
{

    switch(opc)
    {
    case 1:
        add_computador();
        break;
    case 2:
        solicitar_intervencao();
        break;
    case 3:
        registar_intervencao();
        break;
    case 4:
        lista();
        break;
    case 5:
        info();
        break;
    case 6:
        gravar();
        break;
    case 0:
        break;
    default:
        printf("\n\nEscolha apenas uma das opções\n\n");
    }
    return opc;
}
/*--------------------------------------------------------------------------*/
void add_computador()
{
    int i=0;
    struct geral computador[N_PC];

    printf("contador:%d\n",contador);


    printf("\nIntroduza o Numero de Identificacao:\n");  //Adicionar Numero Identificação do Computador
    fflush(stdin);
    scanf("%d", &computador[contador].add_numero_id);

    printf("Introduza a Designacao do Computador:\n");  //Adicionar Designação do Computador
    fflush(stdin);
    scanf("%s", &computador[contador].designacao[50]);

    printf("Introduza o Nome do Colaborador que foi atribuido o portatil:\n");  //Adicionar Nome do Colaborador
    fflush(stdin);
    scanf("%s", &computador[contador].nome_colab[50]);

    printf("Data de Atribuicao do Computador:\n");  //Adicionar Data em que foi atribuido o computador ao colaborador
        do{
        printf("Dia:");
        fflush(stdin);
        scanf("%d", &computador[contador].data_atribuicao[0]);}
        while(computador[contador].data_atribuicao[0]<1 || computador[contador].data_atribuicao[0]>31);

        do{
        printf("Mes:");
        fflush(stdin);
        scanf("%d", &computador[contador].data_atribuicao[1]);}
        while(computador[contador].data_atribuicao[1]<1 || computador[contador].data_atribuicao[1]>12);
        fflush(stdin);

        do{
        printf("Ano:");
        scanf("%d", &computador[contador].data_atribuicao[2]);}
        while(computador[contador].data_atribuicao[2]<2000 || computador[contador].data_atribuicao[2]>2100);

        printf("Estado do computador:\n 0-->operacional\n 1-->Por intervencionar\n 2-->avariado\n"); //Adicionar Estado do Computador
        scanf("%d", &computador[contador].estado_computador);

        printf("Valor do Computador:");

        scanf("%f",&computador[contador].valor_equipamento);

					contador++;         //soma +1 ao contador por cada vez que se adiciona um computador


   printf("\nLista dos Computadores criados:\n");
        for(i=0;i<contador;i++)                    //mostra uma lista dos computadores já criados
            {
              printf("-->Computador N %d \n",i+1);
              printf("\t Designacao: %s \n",computador[i+1].designacao[50]);
              printf("\t Nome do Colaborador:% s \n",computador[i+1].nome_colab[50]);
              printf("\t Data Atribuição do Computador: %d-%d-%d\n",computador[i].data_atribuicao[0],computador[i].data_atribuicao[1],computador[i].data_atribuicao[2]);
              printf("\t Estado do computador: ");
              estado_pc(computador[N_PC],contador);
              printf("\t Valor do computador:%.2f",computador[i].valor_equipamento);
            }

}
/*--------------------------------------------------------------------------*/
void estado_pc(struct geral computador[N_PC],int contador)
{

 printf("\n\tValor que chega ao swtich:%d\n",computador[contador].estado_computador);

switch (computador[contador].estado_computador){

case 0 :
printf("\t operacional\n\n\n\n");
break;

case 1 :
printf("\t intervencionar\n\n\n\n");
break;

case 2 :
printf("\t avariado\n\n\n\n");
break;

default:
printf("\t Nao atribuida\n\n\n\n");
break;
}
}
/*--------------------------------------------------------------------------*/
void solicitar_intervencao()
{

}
/*--------------------------------------------------------------------------*/
void registar_intervencao()
{

}
/*--------------------------------------------------------------------------*/
void lista()
{

}
/*--------------------------------------------------------------------------*/
void info()
{

}
/*--------------------------------------------------------------------------*/
void gravar()
{

}
/*--------------------------------------------------------------------------*/
void sair()
{

}
/*--------------------------------------------------------------------------*/
 
